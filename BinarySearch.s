binary_search_rec:
addi $sp, $sp, -12 #δημιουργώ 3 θέσεις στη στοίβα για αποθήκευση
sw $s0, 0($sp) #θέλω να χρησιμοποιήσω στη συνάρτησή μου τον καταχωρητή $s0 όμως δε γνωρίζω εάν και πως χρησιμοποιείται στο κύριο πρόγραμμα οπότε αποθηκεύω το περιεχόμενό του στη στοίβα
sw $s1, 4($sp) #ομοίως με πάνω
sw $ra, 8($sp) #αποθηκεύω την τιμή του $ra στη στοίβα, ώστε να μπορώ να επιστρέψω αργότερα στη συνάρτηση που κάλεσε τη binary_search_rec
HI1: slt $t0, $a2, $a1 #αν το περιεχόμενο του καταχωρητή $a2, ο οποίος αντιστοιχεί στη μεταβλητή right, είναι μικρότερο του περιεχομένου του $a1, ο οποίος αντιστοιχεί στη μεταβλητή left, το περιεχόμενο του $t0 ισούται με 1
bne $t0, $zero, EXIT1 #αν το περιεχόμενο του $t0 δεν είναι μηδενικό πήγαινε στο EXIT1
sub $t1, $a2, $a1 #αποθηκεύω στον $t1 το αποτέλεσμα της αφαίρεσης right-left
srl $t1, $t1, 1 #διαιρώ το περιεχόμενο του καταχωρητή $t1 με το 2
add $s0, $t1, $a1 #προσθέτω στο περιεχόμενο του $t1 το περιεχόμενο του $a1, δηλαδή τη μεταβλητή left
addi $t7, $s0, 0 #το περιεχόμενο του $t7 ισούται με αυτό του $s0
sll $s0, $s0, 2 #πολλαπλασιάζω τον $s0 με το 4 καθώς πρόκειται για διεύθυνση
add $s0, $s0, $a0 #βρίσκω τη διεύθυνση του A[mid]
lw $s1, 0($s0) #φορτώνω στον καταχωρητή $s1 το περιεχόμενο που βρίσκεται στη θέση 0($s0), δηλαδή το A[mid]
slt $t2, $a3, $s1 #Αν το περιεχόμενο του καταχωρητή $a3 (key) είναι μικρότερο αυτού του $s1 (A[mid]) ο καταχωρητής $t2 παίρνει την τιμή 1
beq $a3, $s1, EXIT2 #Αν key=A[mid] πηγαίνω στο EXIT2
beq $t2, $zero, EXIT3 # Αν το περιεχόμενο του $t2 είναι μηδενικό πηγαίνω στο EXIT3
bne $t2, $zero, EXIT4 # Αν το περιεχόμενο του $t2 δεν είναι μηδενικό πηγαίνω στο EXIT4
EXIT1: lw $ra, 8($sp) #επαναφέρω την αρχική διεύθυνση επιστροφής στον $ra
       lw $s1, 4($sp) #επαναφέρω την αρχική τιμή του καταχωρητή $s1
       lw $s0, 0($sp) #επαναφέρω την αρχική τιμή του καταχωρητή $s0
       addi $sp, $sp, 12 #διαγράφω 3 στοιχεία από τη στοίβα
       addi $v1, $zero, -1 #αναθέτω στον καταχωρητή $v0 την τιμή -1 που πρέπει να επιστρέψει σε αυτή την περίπτωση
       jr $ra #επιστρέφω στην συνάρτηση που κάλεσε τη binary_search_rec
EXIT2: lw $ra, 8($sp) #επαναφέρω την αρχική διεύθυνση επιστροφής στον $ra
       lw $s1, 4($sp) #επαναφέρω την αρχική τιμή του καταχωρητή $s1
       lw $s0, 0($sp) #επαναφέρω την αρχική τιμή του καταχωρητή $s0
       addi $sp, $sp, 12 #διαγράφω 3 στοιχεία από τη στοίβα
       add $v1, $zero, $t7 #αναθέτω στον $v1 την τιμή του mid ώστε να επιστραφεί
       jr $ra #επιστρέφω στην συνάρτηση που κάλεσε τη binary_search_rec
EXIT3: addi $a1, $t7, 1 # αναθέτω στον $a1 την τιμή mid+1
       jal HI1 #γυρνώ στην ΗΙ1 με το νέο $a1
EXIT4: addi $a2, $t7, -1 # αναθέτω στον $a2 την τιμή mid-1
       jal HI1 #γυρνώ στην ΗΙ1 με το νέο $a2


binary_search:
addi $sp, $sp, -4 #δημιουργώ 1 θέση στη στοίβα για αποθήκευση
sw $ra, 0($sp) #αποθηκεύω την τιμή του $ra στη στοίβα, ώστε να μπορώ να επιστρέψω αργότερα στη συνάρτηση που κάλεσε τη binary_search
addi $a3, $a2, 0 #βλέπω πως στην return binary_search_rec το τέταρτο όρισμα, που αντιστοιχεί στον $a3, έχει την τιμή key, οπότε του την αναθέτω
addi $a2, $a1, -1 #βλέπω πως στην return binary_search_rec το τρίτο όρισμα, που αντιστοιχεί στον $a2, έχει την τιμή N-1, οπότε του την αναθέτω
addi $a1, $zero, 0 #βλέπω πως στην return binary_search_rec το δεύτερο όρισμα, που αντιστοιχεί στον $a1, έχει την τιμή 0, οπότε του την αναθέτω
jal binary_search_rec #πηγαίνω στο binary_search_rec με ορίσματα $a0, $a1, $a2, $a3
lw $ra, 0($sp) #φορτώνω στον $ra τη διεύθυνση στην οποία πρέπει να επιστρέψω
jr $ra #επιστρέφω στη συνάρτηση που κάλεσε τη binary_search

